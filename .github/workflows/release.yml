name: üöÄ Release

on:
  push:
    tags:
      - "*"

permissions:
  id-token: write
  contents: write
  pull-requests: write

env:
  AWS_ROLE: arn:aws:iam::213020545630:role/github-runner-role
  AWS_REGION: us-west-1
  PYTHON_VERSIONS: "3.13 3.12 3.11 3.10"

jobs:
  set_env:
    name: Set env
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.set-env.outputs.release_version }}
      aws_role: ${{ steps.set-env.outputs.aws_role }}
      aws_region: ${{ steps.set-env.outputs.aws_region }}
      python_versions: ${{ steps.set-env.outputs.python_versions }}

    steps:
      - name: Set env
        id: set-env
        run: |
          echo "AWS_REGION=${{ env.AWS_REGION }}" >> $GITHUB_OUTPUT
          echo "AWS_ROLE=${{ env.AWS_ROLE }}" >> $GITHUB_OUTPUT
          echo "PYTHON_VERSIONS=${{ env.PYTHON_VERSIONS }}" >> $GITHUB_OUTPUT
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/v}" >> $GITHUB_OUTPUT

  release_docker_arm64:
    name: Docker arm64
    needs: set_env
    uses: ./.github/workflows/release_docker.yml
    with:
      ARCHITECTURE: arm64
      AWS_ROLE: ${{ needs.set_env.outputs.aws_role }}
      AWS_REGION: ${{ needs.set_env.outputs.aws_region }}
      RELEASE_VERSION: ${{ needs.set_env.outputs.release_version }}
    secrets:
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  release_docker_x86_64:
    name: Docker x86_64
    needs: set_env
    uses: ./.github/workflows/release_docker.yml
    with:
      ARCHITECTURE: x86_64
      AWS_ROLE: ${{ needs.set_env.outputs.aws_role }}
      AWS_REGION: ${{ needs.set_env.outputs.aws_region }}
      RELEASE_VERSION: ${{ needs.set_env.outputs.release_version }}
    secrets:
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  release_linux_arm64:
    name: Linux arm64
    needs: set_env
    uses: ./.github/workflows/release_linux.yml
    with:
      ARCHITECTURE: arm64
      AWS_ROLE: ${{ needs.set_env.outputs.aws_role }}
      AWS_REGION: ${{ needs.set_env.outputs.aws_region }}
      PYTHON_VERSIONS: ${{ needs.set_env.outputs.python_versions }}
      RELEASE_VERSION: ${{ needs.set_env.outputs.release_version }}
    secrets:
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  release_linux_x86_64:
    name: Linux x86_64
    needs: set_env
    uses: ./.github/workflows/release_linux.yml
    with:
      ARCHITECTURE: x86_64
      AWS_ROLE: ${{ needs.set_env.outputs.aws_role }}
      AWS_REGION: ${{ needs.set_env.outputs.aws_region }}
      PYTHON_VERSIONS: ${{ needs.set_env.outputs.python_versions }}
      RELEASE_VERSION: ${{ needs.set_env.outputs.release_version }}
    secrets:
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  release_macos_arm64_x86_64:
    name: MacOS arm64 and x86_64
    needs: set_env
    uses: ./.github/workflows/release_macos.yml
    with:
      PYTHON_VERSIONS: ${{ needs.set_env.outputs.python_versions }}

  release_windows_x86_64:
    name: Windows x86_64
    needs: set_env
    uses: ./.github/workflows/release_windows.yml
    with:
      ARCHITECTURE: x86_64
      AWS_ROLE: ${{ needs.set_env.outputs.aws_role }}
      AWS_REGION: ${{ needs.set_env.outputs.aws_region }}
      PYTHON_VERSIONS: ${{ needs.set_env.outputs.python_versions }}
    secrets:
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  create_draft_release:
    name: Create draft release
    runs-on: ubuntu-latest
    needs:
      - set_env
      - release_docker_arm64
      - release_docker_x86_64
      - release_linux_arm64
      - release_linux_x86_64
      - release_macos_arm64_x86_64
      - release_windows_x86_64
    if: success() || failure()

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        id: download-artifacts
        with:
          merge-multiple: true

      - name: Extract artifacts
        run: |
          mkdir -p ${{ steps.download-artifacts.outputs.download-path }}/release

          mv ${{ steps.download-artifacts.outputs.download-path }}/*.tar ${{ steps.download-artifacts.outputs.download-path }}/release/

          for file in ${{ steps.download-artifacts.outputs.download-path }}/*.tar.gz; do tar -xzvf "$file" -C ${{ steps.download-artifacts.outputs.download-path }}/release; done
          for file in ${{ steps.download-artifacts.outputs.download-path }}/*.zip; do unzip "$file" -d ${{ steps.download-artifacts.outputs.download-path }}/release; done

          ls -la ${{ steps.download-artifacts.outputs.download-path }}/release

      - name: Create release draft
        uses: ncipollo/release-action@v1.18.0
        with:
          allowUpdates: true
          artifacts: ${{ steps.download-artifacts.outputs.download-path }}/release/*
          draft: true
          name: "üöÄ Release ${{ needs.set_env.outputs.release_version }}"
          replacesArtifacts: true
          updateOnlyUnreleased: true
          body: |
            üöÄ Release ${{ needs.set_env.outputs.release_version }}

            Binaries are available for the following platforms:
            - Docker arm64
            - Docker x86_64
            - Linux arm64
            - Linux x86_64
            - MacOS arm64 (Apple Silicon)
            - MacOS x86_64 (Intel)
            - Windows x86_64

            üêß Linux Binaries
            The Linux binaries require a minimum glibc version of 2.34.

            These are the minimum versions of common distributions with glibc 2.34 or later.

            | Distribution | First version with glibc 2.34+ |
            |--------------|--------------------------------|
            | Amazon Linux | 2023                           |
            | Arch         | 2021                           |
            | CentOS       | Stream 9                       |
            | Debian       | 12                             |
            | Fedora       | 35                             |
            | RHEL         | 9.0                            |
            | Ubuntu       | 22.04                          |

            üñ•Ô∏è Windows Binaries
            The Windows binaries require a minimum version of Visual C++ 2022.
            You may need to install the latest Microsoft Visual C++ Redistributable.

            üçè MacOS Binaries
            The MacOS arm64 (Apple Silicon) binaries require a minimum version of MacOS 11 Big Sur.
            The MacOS x86_64 (Intel) binaries require a minimum version of MacOS 10.13 High Sierra.

            üêç Python Wheels
            The Python wheels are available for the following platforms:
            - Linux arm64 (Python ${{ env.PYTHON_VERSIONS }})
            - Linux x86_64 (Python ${{ env.PYTHON_VERSIONS }})
            - MacOS arm64 [Apple Silicon] (Python ${{ env.PYTHON_VERSIONS }})
            - MacOS x86_64 [Intel] (Python ${{ env.PYTHON_VERSIONS }})
            - Windows x86_64 (Python ${{ env.PYTHON_VERSIONS }})

name: ðŸš€ Release Windows

on:
  workflow_call:
    inputs:
      ARCHITECTURE:
        description: "The architecture to build for"
        required: true
        default: "x86_64"
        type: string
      AWS_ROLE:
        description: "AWS role to assume"
        required: true
        type: string
      AWS_REGION:
        description: "AWS region"
        required: true
        type: string
      PYTHON_VERSIONS:
        description: "Python versions to build"
        required: true
        type: string
    secrets:
      GH_PERSONAL_ACCESS_TOKEN:
        description: "GitHub personal access token"
        required: true

env:
  EC2_IMAGE_ID: ami-0cfb2e47dd591ebdb
  EC2_INSTANCE_TYPE: m7i.4xlarge

jobs:
  start-self-hosted-runner:
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.AWS_ROLE }}
          role-duration-seconds: 900
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: crunchy234/ec2-github-runner@windows-support-18
        with:
          mode: start
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ${{ env.EC2_IMAGE_ID }}
          ec2-instance-type: ${{ env.EC2_INSTANCE_TYPE }}
          ec2-os: windows
          subnet-id: subnet-0e28805edbdad482f
          security-group-id: sg-09c8aa5830122d671
          aws-resource-tags: >
            [
              {"Key": "Name", "Value": "ec2-github-runner"}
            ]

  release_windows:
    name: Build Oxen CLI, Server, and Python wheels
    needs: start-self-hosted-runner
    runs-on: ${{ needs.start-self-hosted-runner.outputs.label }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create release directory
        run: mkdir ${{ github.workspace }}\release

      - name: Install dependencies
        run: |
          choco install -y cmake llvm uv rustup.install

      - name: Build oxen binaries
        run: |
          refreshenv
          cd ${{ github.workspace }}\oxen-rust
          cargo build --release

      - name: Build Python wheels
        run: |
          refreshenv
          uv python install ${{ inputs.PYTHON_VERSIONS }}

          cd ${{ github.workspace }}\oxen-python

          $versions = "${{ inputs.PYTHON_VERSIONS }}" -split ' '
          foreach ($version in $versions) {
              uvx maturin build --release --interpreter "C:\Users\Administrator\AppData\Roaming\uv\python\cpython-$version.*\python.exe"
          }

      - name: Create zip with oxen binaries
        run: |
          Compress-Archive -Path "${{ github.workspace }}\oxen-rust\target\release\oxen.exe" -DestinationPath "${{ github.workspace }}\release\oxen-windows-${{ inputs.ARCHITECTURE }}.exe.zip"
          Compress-Archive -Path "${{ github.workspace }}\oxen-rust\target\release\oxen-server.exe" -DestinationPath "${{ github.workspace }}\release\oxen-server-windows-${{ inputs.ARCHITECTURE }}.exe.zip"

      - name: Create zip with Python wheels
        run: |
          Compress-Archive -Path ${{ github.workspace }}\oxen-python\target\wheels\* -DestinationPath ${{ github.workspace }}\release\oxen-wheels-windows-${{ inputs.ARCHITECTURE }}.zip

      - name: Create zip with all artifacts
        run: |
          Compress-Archive -Path "${{ github.workspace }}\release\*" -DestinationPath "${{ github.workspace }}\release\oxen-windows-${{ inputs.ARCHITECTURE }}-release.zip"

      - name: Upload all artifacts
        uses: actions/upload-artifact@v4
        with:
          name: oxen-windows-release-${{ inputs.ARCHITECTURE }}.zip
          path: ${{ github.workspace }}\release\oxen-windows-${{ inputs.ARCHITECTURE }}-release.zip
          retention-days: 1

  stop-self-hosted-runner:
    name: Stop self-hosted EC2 runner
    needs:
      - start-self-hosted-runner
      - release_windows
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.AWS_ROLE }}
          role-duration-seconds: 900
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Stop EC2 runner
        uses: crunchy234/ec2-github-runner@windows-support-18
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-self-hosted-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-self-hosted-runner.outputs.ec2-instance-id }}
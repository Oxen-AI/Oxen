on:
  push:
    # Pattern matched against refs/tags
    tags:
      - '*'
jobs:
  release_ubuntu_latest:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/v}" >> $GITHUB_ENV

      # cache the build assets so they don't recompile every time.
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install latest rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
          override: true

      - name: Install system dependencies
        run: |
          sudo apt-get update \
          && sudo apt-get install -y \
          libdbus-1-dev \
          ruby ruby-dev rubygems build-essential \
          && sudo gem install fpm

      - name: Build oxen
        run: cargo build --release

      - name: Package Oxen Server
        run: |
          fpm \
            -s dir -t deb \
            -p oxen-server-ubuntu-latest-${{ env.RELEASE_VERSION }}.deb \
            -C target/release \
            --name oxen-server \
            --version ${{ env.RELEASE_VERSION }} \
            --architecture all \
            --description "oxen-server is the server for oxen to version and manage large machine learning datasets" \
            --url "https://oxen.ai" \
            --maintainer "OxenAI hello@oxen.ai" \
            oxen-server=/usr/bin/oxen-server

      - name: Package Oxen CLI
        run: |
          fpm \
            -s dir -t deb \
            -p oxen-ubuntu-latest-${{ env.RELEASE_VERSION }}.deb \
            -C target/release \
            --name oxen \
            --version ${{ env.RELEASE_VERSION }} \
            --architecture all \
            --description "Oxen is a command line tool to version and manage large machine learning datasets" \
            --url "https://oxen.ai" \
            --maintainer "OxenAI hello@oxen.ai" \
            oxen=/usr/bin/oxen

      - name: Upload Oxen Server binary to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: oxen-server-ubuntu-latest-${{ env.RELEASE_VERSION }}.deb
          asset_name: oxen-server-ubuntu-latest-${{ env.RELEASE_VERSION }}.deb
          tag: ${{ github.ref }}

      - name: Upload Oxen CLI binary to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: oxen-ubuntu-latest-${{ env.RELEASE_VERSION }}.deb
          asset_name: oxen-ubuntu-latest-${{ env.RELEASE_VERSION }}.deb
          tag: ${{ github.ref }}

  release_ubuntu_20_04:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/v}" >> $GITHUB_ENV

      # cache the build assets so they don't recompile every time.
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install latest rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
          override: true

      - name: Install system dependencies
        run: |
          sudo apt-get update \
          && sudo apt-get install -y \
          libdbus-1-dev \
          ruby ruby-dev rubygems build-essential \
          && sudo gem install fpm

      - name: Build oxen
        run: cargo build --release

      - name: Package Oxen Server
        run: |
          fpm \
            -s dir -t deb \
            -p oxen-server-ubuntu-20.04-${{ env.RELEASE_VERSION }}.deb \
            -C target/release \
            --name oxen-server \
            --version ${{ env.RELEASE_VERSION }} \
            --architecture all \
            --description "oxen-server is the server for oxen to version and manage large machine learning datasets" \
            --url "https://oxen.ai" \
            --maintainer "OxenAI hello@oxen.ai" \
            oxen-server=/usr/bin/oxen-server

      - name: Package Oxen CLI
        run: |
          fpm \
            -s dir -t deb \
            -p oxen-ubuntu-20.04-${{ env.RELEASE_VERSION }}.deb \
            -C target/release \
            --name oxen \
            --version ${{ env.RELEASE_VERSION }} \
            --architecture all \
            --description "Oxen is a command line tool to version and manage large machine learning datasets" \
            --url "https://oxen.ai" \
            --maintainer "OxenAI hello@oxen.ai" \
            oxen=/usr/bin/oxen

      - name: Upload Oxen Server binary to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: oxen-server-ubuntu-20.04-${{ env.RELEASE_VERSION }}.deb
          asset_name: oxen-server-ubuntu-20.04-${{ env.RELEASE_VERSION }}.deb
          tag: ${{ github.ref }}

      - name: Upload Oxen CLI binary to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: oxen-ubuntu-20.04-${{ env.RELEASE_VERSION }}.deb
          asset_name: oxen-ubuntu-20.04-${{ env.RELEASE_VERSION }}.deb
          tag: ${{ github.ref }}

  release_windows_latest:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install latest rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          override: true

      - name: Build
        run: cargo build --release --bins

      - name: Upload oxen.exe windows to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/release/oxen.exe
          asset_name: oxen.exe
          tag: ${{ github.ref }}

      - name: Upload oxen-server.exe windows to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/release/oxen-server.exe
          asset_name: oxen-server.exe
          tag: ${{ github.ref }}

  release_docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/v}" >> $GITHUB_ENV

      - name: Build Docker
        run: docker build -t oxen/oxen-server .

      - name: Save Docker
        run: docker save oxen/oxen-server -o oxen-server-docker-${{ env.RELEASE_VERSION }}.tar

      - name: Upload docker to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: oxen-server-docker-${{ env.RELEASE_VERSION }}.tar
          asset_name: oxen-server-docker-${{ env.RELEASE_VERSION }}.tar
          tag: ${{ github.ref }}

  release_mac_12:
    runs-on: macos-12

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/v}" >> $GITHUB_ENV

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install latest rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          target: x86_64-apple-darwin
          default: true
          profile: minimal
          toolchain: stable
          override: true

      - name: Build oxen for mac
        run: cargo build --release

      - name: Tar.gz oxen for mac
        run: tar -czf target/release/oxen-mac-12.0-${{ env.RELEASE_VERSION }}.tar.gz target/release/oxen

      - name: Tar.gz oxen-server for mac
        run: tar -czf target/release/oxen-server-mac-12.0-${{ env.RELEASE_VERSION }}.tar.gz target/release/oxen-server

      - name: Upload oxen to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/release/oxen-mac-12.0-${{ env.RELEASE_VERSION }}.tar.gz
          asset_name: oxen-mac-12.0-${{ env.RELEASE_VERSION }}.tar.gz
          tag: ${{ github.ref }}

      - name: Upload oxen-server to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/release/oxen-server-mac-12.0-${{ env.RELEASE_VERSION }}.tar.gz
          asset_name: oxen-server-mac-12.0-${{ env.RELEASE_VERSION }}.tar.gz
          tag: ${{ github.ref }}

  release_mac_11:
    runs-on: macos-11

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/v}" >> $GITHUB_ENV

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install latest rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          target: x86_64-apple-darwin
          default: true
          profile: minimal
          toolchain: stable
          override: true

      - name: Build oxen for mac
        run: cargo build --release

      - name: Tar.gz oxen for mac
        run: tar -czf target/release/oxen-mac-11.0-${{ env.RELEASE_VERSION }}.tar.gz target/release/oxen

      - name: Tar.gz oxen-server for mac
        run: tar -czf target/release/oxen-server-mac-11.0-${{ env.RELEASE_VERSION }}.tar.gz target/release/oxen-server

      - name: Upload oxen to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/release/oxen-mac-11.0-${{ env.RELEASE_VERSION }}.tar.gz
          asset_name: oxen-mac-11.0-${{ env.RELEASE_VERSION }}.tar.gz
          tag: ${{ github.ref }}

      - name: Upload oxen-server to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/release/oxen-server-mac-11.0-${{ env.RELEASE_VERSION }}.tar.gz
          asset_name: oxen-server-mac-11.0-${{ env.RELEASE_VERSION }}.tar.gz
          tag: ${{ github.ref }}

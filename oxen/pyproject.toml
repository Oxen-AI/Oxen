[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
version = "0.35.0"
name = "oxenai"
description = "Data version control for machine learning"
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Rust",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "fsspec",
    "pandas",
    "polars",
    "pyarrow",
    "requests",
    "toml",
    "tqdm",
]

[project.entry-points."fsspec.specs"]
oxen = "oxen.oxen_fs:OxenFS"

[tool.maturin]
python-source = "python"
features = ["pyo3/extension-module"]

# Poetry configuration
[tool.poetry]
name = "oxenai"
version = "0.35.0"
description = "Data version control for machine learning"
authors = ["Oxen AI Team"]
readme = "README.md"
packages = [{include = "oxen", from = "python"}]

[tool.poetry.dependencies]
python = "^3.9"
fsspec = "*"
pandas = ">=2.0.1"
polars = ">=1.20.0"
pyarrow = ">=18.0.0"
requests = ">=2.32.3"
toml = "^0.10.2"
tqdm = ">=4.67.1"
maturin = "*"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.4"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
pytest-datadir = "^1.4.1"
ruff = ">=0.5.0"

[tool.poetry.scripts]
test = "pytest:main"
tests = "pytest:main"

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=oxen",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-vv"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Tests that take a long time to run"
]

# Coverage configuration
[tool.coverage.run]
source = ["python/oxen"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/conftest.py",
    "*/test_*.py",
    "*/.venv/*",
    "*/venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
precision = 2
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"